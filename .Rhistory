(2/3)*100
v <- c(1,2,3,4,5,6,7,8,9,10)
v
v[2:4]
v[7:10]
v <- c(1,2,3,4)
names(v) <-c('a', 'b', 'c', 'd')
v
v[1]
v[2]
v['b']
v[c('b', 'c')]
v[3,1]
v[c(1,4)]
cls
v
v[v>2]
v[v<3]
describe(v)
head.v
head(v)
cls
v
v>3
filter(v>3)
filter <- v>2
filter
v[filter]
2 ^4
cls
stock.prices <- c(23,27,23,21,34)
names(stock.prices) <- c('Mon', 'Tues', 'Wed', 'Thu', 'Fri')
stock.prices
stock.prices.T
stock.prices
mean(stock.prices)
stock.prices > 23
over.23 <- stock.prices > 23
over.23
stock.prices[over.23]
stock.prices[stock.prices > 23]
max(stock.prices)
stock.prices[max(stock.prices)]
stock.prices[stock.prices == 34]
stock.prices[stock.prices == max(stock.prices)]
1:10
v <- 1:10
matrix(v)
matrix(v, nrow = 2)
a <- matrix(v, nrow = 2)
a
matrix(1:12, byrow=F, nrow = 4)
matrix(1:12, byrow = T, nrow = 4)
googl = c(450,451,452,445,468)
msft = c(230,231,232,233,220)
stocks <- c(googl, msft)
print(stocks)
googl = c(450,451,452,445,468)
msft = c(230,231,232,233,220)
stocks <- c(googl, msft)
print(stocks)
stocks.matrix <- matrix(stocks.matrix, byrow = T, nrow = 2)
print(stocks.matrix)
googl = c(450,451,452,445,468)
msft = c(230,231,232,233,220)
stocks <- c(googl, msft)
stocks.matrix <- matrix(stocks, byrow = T, nrow = 2)
print(stocks.matrix)
googl = c(450,451,452,445,468)
msft = c(230,231,232,233,220)
stocks <- c(googl, msft)
print(stocks)
stocks.matrix <- matrix(stocks, byrow = T, nrow = 2)
days <- c('Mon', 'Tue', 'Wed', 'Thu', 'Fri')
st.names <- c('Google', 'Microsoft')
colnames(sstocks.matrix) <- days
rownames(stocks.matrix) <- st.names
print(stocks.matrix)
days <- c('Mon', 'Tue', 'Wed', 'Thu', 'Fri')
colnames(stocks.matrix) <- days
googl = c(450,451,452,445,468)
print(stocks.matrix)
googl = c(450,451,452,445,468)
msft = c(230,231,232,233,220)
stocks <- c(googl, msft)
stocks.matrix <- matrix(stocks, byrow = T, nrow = 2)
days <- c('Mon', 'Tue', 'Wed', 'Thu', 'Fri')
st.names <- c('Google', 'Microsoft')
colnames(stocks.matrix) <- days
rownames(stocks.matrix) <- st.names
print(stocks.matrix)
mat <- matrix(1:25, byrow = T, nrow = 5)
mat
1/mat
mat >1
mat[mat>1]
mat[mat>15]
mat + mat
mat
prod(mat)
mat*mat
mat <- matrix(1:50, byrow = T, nrow = 5)
mat
mat[1,]
mat[,1]
mat[2,1]
mat[1,2]
mat[2,1]
mat[3,1]
mat[1,1]
mat[1,2]
mat[5,2]
mat[1:3,2]
mat
mat[1:3,]
(3+3)/2
install.packages('dplyr')
install.packages('data.table')
install.packages('data.table')
install.packages('readr')
install.packages('stringr')
install.packages('lubridate')
install.packages('ggplot2')
install.packages('ggvis')
install.packages('rgl')
install.packages('htmlwidgets')
install.packages('labttic')
install.packages('lattic')
install.packages('lattice')
install.packages('mlr')
install.packages('randomForest')
install.packages('caret')
install.packages('e1071')
install.packages('vcd')
install.packages('glmnet')
install.packages('Esquisse ')
install.packages('Esquisse')
install.packages('esquisse')
install.packages('BioConductor')
install.packages('bioconductor')
install.packages('knitr')
install.packages('dt')
install.packages('DT')
install.packages('RCrawler')
install.packages('Rcrawler')
install.packages('RMarkdown')
install.packages('rmarkdown')
install.packages('Leaflet')
install.packages('leaflet')
install.packages('Janitor')
install.packages('jkanitor')
install.packages('janitor')
install.packages('plotly')
install.packages('Rcharts')
install.packages('rcharts')
install.packages('future')
install.packages('RMySQL')
install.packages('Prophet')
install.packages('prophet')
install.packages(c("backports", "data.table", "rlang"))
install.packages(c("backports", "data.table", "rlang"))
library(curl)
library(DBI)
install.packages("RMariaDB")
library(RMySQL)
install.packages('DBI')
install.packages("DBI")
install.packages("DBI")
install.packages("DBI")
library(RMySQL)
library(RMySQL)
library(DBI)
library(RMySQL)
library(DBI)
library(RMySQL)
con <- dbConnect(MySQL(), user="root",
password="",
dbname='ecam_erp_13_dec_2020',
host="localhost")
rs <- dbSendQuery(con, "
SELECT
order_items.order_id as invoiceNo,
o.customer_id as customerID,
cs.sex as gender,
product_stores.id as item,
product_stores.sku as sku,
product_stores.`name` as item_name,
product_stores.supplier_price AS supplier_price_yuan,
(0.15 * product_stores.supplier_price) AS supplier_price_us,
product_stores.unit_price AS sale_price_us,
(product_stores.unit_price - (0.15 * product_stores.supplier_price)) as revenue,
DATE(oit.min_date) AS invoiceDate
FROM
order_items
LEFT JOIN orders o ON order_items.order_id = o.id
LEFT JOIN customers cs ON o.customer_id = cs.id
INNER JOIN ( SELECT order_item_id, order_item_status_id, MIN( DATE( updated_at ) ) AS min_date FROM order_item_trackers WHERE order_item_status_id IN ( 2, 44 ) GROUP BY order_item_id ) AS oit ON order_items.id = oit.order_item_id,
product_stores
WHERE
product_stores.id = order_items.product_id
AND oit.min_date BETWEEN '2018-01-01 00:00:00'
AND '2020-11-30 23:59:59'
ORDER BY invoiceDate DESC;
")
View(rs)
View(rs)
data <- fetch(rs, n=10)
View(data)
View(data)
huh <- dbHasCompleted(rs)
dbClearResult(rs)
View(data)
View(data)
View(data)
View(data)
data <- fetch(rs)
library(DBI)
library(RMySQL)
con <- dbConnect(MySQL(), user="root",
password="",
dbname='ecam_erp_13_dec_2020',
host="localhost")
rs <- dbSendQuery(con, "
SELECT
order_items.order_id as invoiceNo,
o.customer_id as customerID,
cs.sex as gender,
product_stores.id as item,
product_stores.sku as sku,
product_stores.`name` as item_name,
product_stores.supplier_price AS supplier_price_yuan,
(0.15 * product_stores.supplier_price) AS supplier_price_us,
product_stores.unit_price AS sale_price_us,
(product_stores.unit_price - (0.15 * product_stores.supplier_price)) as revenue,
DATE(oit.min_date) AS invoiceDate
FROM
order_items
LEFT JOIN orders o ON order_items.order_id = o.id
LEFT JOIN customers cs ON o.customer_id = cs.id
INNER JOIN ( SELECT order_item_id, order_item_status_id, MIN( DATE( updated_at ) ) AS min_date FROM order_item_trackers WHERE order_item_status_id IN ( 2, 44 ) GROUP BY order_item_id ) AS oit ON order_items.id = oit.order_item_id,
product_stores
WHERE
product_stores.id = order_items.product_id
AND oit.min_date BETWEEN '2018-01-01 00:00:00'
AND '2020-11-30 23:59:59'
ORDER BY invoiceDate DESC;
")
data <- fetch(rs)
View(data)
View(data)
str(data)
info(data)
install.packages(c("backports", "data.table", "rlang"))
setwd("C:/Users/Vanna-DataScientist/Desktop/k_mean_R")
# k-mean clustering
#import dataset
dataset <- read.csv("Mall_Customers.csv")
View(dataset)
View(dataset)
X <- dataset[-2]
View(X)
View(X)
#subset
X <- dataset[4:5]
View(X)
View(X)
#Ecludian - to find the number of cluster
set.seed(6)
wcss <- vector()
for(i in 1:10) <- sum(kmeans(X, i)$withinss)
plot(1:10, wcss, type = "b", main = paste('Clusters of Client'), xlab = "Number of clusters", ylab = "WCSS")
#Ecludian - to find the number of cluster
set.seed(6)
wcss <- vector()
for (i in 1:10) <- sum(kmeans(X, i)$withinss)
for (i in 1:10) wcss[i] <- sum(kmeans(X, i)$withinss)
plot(1:10, wcss, type = "b", main = paste('Clusters of Client'), xlab = "Number of clusters", ylab = "WCSS")
#fit kmeans to the dataset
set.seed(29)
kmeans <- kmeans(X, 4, 300, nstart = 10)
View(kmeans)
View(kmeans)
View(dataset)
View(dataset)
View(X)
View(X)
X$cluster <- kmeans
X$cluster <- as.dataframe(kmeans)
as.data.frame(kmeans)
X$cluster <- as.dataframe(kmeans)
X$cluster <- as.data.frame(kmeans)
kmeans$cluster
dataset$cluster <- kmeans$cluster
View(dataset)
View(dataset)
library(cluster)
clusplot(X,
kmeans$cluster,
line=0,
shade=T,
color=T,
labels=2,
span=T,
main=paste("Cluster of Clients"),
xlab = "Anual Income",
ylab = "Spending Score")
clusplot(X,
kmeans$cluster,
line=0,
shade=T,
color=T,
span=T,
main=paste("Cluster of Clients"),
xlab = "Anual Income",
ylab = "Spending Score")
View(X)
View(X)
# k-mean clustering
#import dataset
dataset <- read.csv("Mall_Customers.csv")
#subset
X <- dataset[4:5]
#Ecludian - to find the number of cluster
set.seed(6)
wcss <- vector()
for (i in 1:10) wcss[i] <- sum(kmeans(X, i)$withinss)
plot(1:10, wcss, type = "b", main = paste('Clusters of Client'),
xlab = "Number of clusters", ylab = "WCSS")
#fit kmeans to the dataset
set.seed(29)
kmeans <- kmeans(X, 5, 300, nstart = 10)
dataset$cluster <- kmeans$cluster
#visual
library(cluster)
clusplot(X,
kmeans$cluster,
line=0,
shade=T,
color=T,
span=T,
main=paste("Cluster of Clients"),
xlab = "Anual Income",
ylab = "Spending Score")
View(dataset)
View(dataset)
View(kmeans)
View(X)
View(X)
View(dataset)
View(dataset)
library(cluster)
clusplot(X,
kmeans$cluster,
line=0,
shade=T,
color=T,
span=T,
labels = 1,
plotchar = T,
main=paste("Cluster of Clients"),
xlab = "Anual Income",
ylab = "Spending Score")
